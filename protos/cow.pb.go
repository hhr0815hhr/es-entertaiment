// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cow.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type S2C_Cow_Start struct {
	CountDown            int32    `protobuf:"varint,1,opt,name=CountDown,proto3" json:"CountDown,omitempty"`
	State                int32    `protobuf:"varint,2,opt,name=State,proto3" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_Cow_Start) Reset()         { *m = S2C_Cow_Start{} }
func (m *S2C_Cow_Start) String() string { return proto.CompactTextString(m) }
func (*S2C_Cow_Start) ProtoMessage()    {}
func (*S2C_Cow_Start) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7d04b7edf541249, []int{0}
}
func (m *S2C_Cow_Start) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Cow_Start) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Cow_Start.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Cow_Start) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Cow_Start.Merge(m, src)
}
func (m *S2C_Cow_Start) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Cow_Start) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Cow_Start.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Cow_Start proto.InternalMessageInfo

func (m *S2C_Cow_Start) GetCountDown() int32 {
	if m != nil {
		return m.CountDown
	}
	return 0
}

func (m *S2C_Cow_Start) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type S2C_Cow_Draw struct {
	CountDown            int32    `protobuf:"varint,1,opt,name=CountDown,proto3" json:"CountDown,omitempty"`
	State                int32    `protobuf:"varint,2,opt,name=State,proto3" json:"State,omitempty"`
	Cards                []*Cards `protobuf:"bytes,3,rep,name=Cards,proto3" json:"Cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_Cow_Draw) Reset()         { *m = S2C_Cow_Draw{} }
func (m *S2C_Cow_Draw) String() string { return proto.CompactTextString(m) }
func (*S2C_Cow_Draw) ProtoMessage()    {}
func (*S2C_Cow_Draw) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7d04b7edf541249, []int{1}
}
func (m *S2C_Cow_Draw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Cow_Draw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Cow_Draw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Cow_Draw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Cow_Draw.Merge(m, src)
}
func (m *S2C_Cow_Draw) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Cow_Draw) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Cow_Draw.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Cow_Draw proto.InternalMessageInfo

func (m *S2C_Cow_Draw) GetCountDown() int32 {
	if m != nil {
		return m.CountDown
	}
	return 0
}

func (m *S2C_Cow_Draw) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *S2C_Cow_Draw) GetCards() []*Cards {
	if m != nil {
		return m.Cards
	}
	return nil
}

type Cards struct {
	Card                 []int32  `protobuf:"varint,1,rep,packed,name=Card,proto3" json:"Card,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cards) Reset()         { *m = Cards{} }
func (m *Cards) String() string { return proto.CompactTextString(m) }
func (*Cards) ProtoMessage()    {}
func (*Cards) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7d04b7edf541249, []int{2}
}
func (m *Cards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cards.Merge(m, src)
}
func (m *Cards) XXX_Size() int {
	return m.Size()
}
func (m *Cards) XXX_DiscardUnknown() {
	xxx_messageInfo_Cards.DiscardUnknown(m)
}

var xxx_messageInfo_Cards proto.InternalMessageInfo

func (m *Cards) GetCard() []int32 {
	if m != nil {
		return m.Card
	}
	return nil
}

type S2C_Cow_Compare struct {
	CountDown            int32    `protobuf:"varint,1,opt,name=CountDown,proto3" json:"CountDown,omitempty"`
	State                int32    `protobuf:"varint,2,opt,name=State,proto3" json:"State,omitempty"`
	CowType              []string `protobuf:"bytes,3,rep,name=CowType,proto3" json:"CowType,omitempty"`
	Result               []int32  `protobuf:"varint,4,rep,packed,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_Cow_Compare) Reset()         { *m = S2C_Cow_Compare{} }
func (m *S2C_Cow_Compare) String() string { return proto.CompactTextString(m) }
func (*S2C_Cow_Compare) ProtoMessage()    {}
func (*S2C_Cow_Compare) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7d04b7edf541249, []int{3}
}
func (m *S2C_Cow_Compare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Cow_Compare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Cow_Compare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Cow_Compare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Cow_Compare.Merge(m, src)
}
func (m *S2C_Cow_Compare) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Cow_Compare) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Cow_Compare.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Cow_Compare proto.InternalMessageInfo

func (m *S2C_Cow_Compare) GetCountDown() int32 {
	if m != nil {
		return m.CountDown
	}
	return 0
}

func (m *S2C_Cow_Compare) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *S2C_Cow_Compare) GetCowType() []string {
	if m != nil {
		return m.CowType
	}
	return nil
}

func (m *S2C_Cow_Compare) GetResult() []int32 {
	if m != nil {
		return m.Result
	}
	return nil
}

type S2C_Cow_Ready struct {
	State                int32    `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_Cow_Ready) Reset()         { *m = S2C_Cow_Ready{} }
func (m *S2C_Cow_Ready) String() string { return proto.CompactTextString(m) }
func (*S2C_Cow_Ready) ProtoMessage()    {}
func (*S2C_Cow_Ready) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7d04b7edf541249, []int{4}
}
func (m *S2C_Cow_Ready) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Cow_Ready) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Cow_Ready.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Cow_Ready) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Cow_Ready.Merge(m, src)
}
func (m *S2C_Cow_Ready) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Cow_Ready) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Cow_Ready.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Cow_Ready proto.InternalMessageInfo

func (m *S2C_Cow_Ready) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func init() {
	proto.RegisterType((*S2C_Cow_Start)(nil), "protos.S2C_Cow_Start")
	proto.RegisterType((*S2C_Cow_Draw)(nil), "protos.S2C_Cow_Draw")
	proto.RegisterType((*Cards)(nil), "protos.Cards")
	proto.RegisterType((*S2C_Cow_Compare)(nil), "protos.S2C_Cow_Compare")
	proto.RegisterType((*S2C_Cow_Ready)(nil), "protos.S2C_Cow_Ready")
}

func init() { proto.RegisterFile("cow.proto", fileDescriptor_f7d04b7edf541249) }

var fileDescriptor_f7d04b7edf541249 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xce, 0x2f, 0xd7,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x4a, 0xce, 0x5c, 0xbc, 0xc1, 0x46,
	0xce, 0xf1, 0xce, 0xf9, 0xe5, 0xf1, 0xc1, 0x25, 0x89, 0x45, 0x25, 0x42, 0x32, 0x5c, 0x9c, 0xce,
	0xf9, 0xa5, 0x79, 0x25, 0x2e, 0xf9, 0xe5, 0x79, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x08,
	0x01, 0x21, 0x11, 0x2e, 0xd6, 0xe0, 0x92, 0xc4, 0x92, 0x54, 0x09, 0x26, 0xb0, 0x0c, 0x84, 0xa3,
	0x94, 0xce, 0xc5, 0x03, 0x33, 0xc4, 0xa5, 0x28, 0xb1, 0x9c, 0x1c, 0x33, 0x84, 0x94, 0xb9, 0x58,
	0x9d, 0x13, 0x8b, 0x52, 0x8a, 0x25, 0x98, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0x78, 0x21, 0xee, 0x2c,
	0xd6, 0x03, 0x0b, 0x06, 0x41, 0xe4, 0x94, 0xa4, 0xa1, 0x8a, 0x84, 0x84, 0xb8, 0x58, 0x40, 0x0c,
	0x09, 0x46, 0x05, 0x66, 0x0d, 0xd6, 0x20, 0x30, 0x5b, 0xa9, 0x9c, 0x8b, 0x1f, 0xe6, 0x0a, 0xe7,
	0xfc, 0xdc, 0x82, 0xc4, 0xa2, 0x54, 0xb2, 0x1c, 0x22, 0xc1, 0xc5, 0xee, 0x9c, 0x5f, 0x1e, 0x52,
	0x59, 0x90, 0x0a, 0x76, 0x0a, 0x67, 0x10, 0x8c, 0x2b, 0x24, 0xc6, 0xc5, 0x16, 0x94, 0x5a, 0x5c,
	0x9a, 0x53, 0x22, 0xc1, 0x02, 0xb6, 0x16, 0xca, 0x53, 0x52, 0x45, 0x84, 0x61, 0x50, 0x6a, 0x62,
	0x4a, 0x25, 0xc2, 0x60, 0x46, 0x24, 0x83, 0x9d, 0x04, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48,
	0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0x20, 0x91, 0x60, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0xc7, 0x43, 0xc6, 0x0a, 0x98, 0x01, 0x00, 0x00,
}

func (m *S2C_Cow_Start) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Cow_Start) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Cow_Start) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintCow(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.CountDown != 0 {
		i = encodeVarintCow(dAtA, i, uint64(m.CountDown))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Cow_Draw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Cow_Draw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Cow_Draw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cards) > 0 {
		for iNdEx := len(m.Cards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.State != 0 {
		i = encodeVarintCow(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.CountDown != 0 {
		i = encodeVarintCow(dAtA, i, uint64(m.CountDown))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Cards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Card) > 0 {
		dAtA2 := make([]byte, len(m.Card)*10)
		var j1 int
		for _, num1 := range m.Card {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintCow(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Cow_Compare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Cow_Compare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Cow_Compare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Result) > 0 {
		dAtA4 := make([]byte, len(m.Result)*10)
		var j3 int
		for _, num1 := range m.Result {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintCow(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CowType) > 0 {
		for iNdEx := len(m.CowType) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CowType[iNdEx])
			copy(dAtA[i:], m.CowType[iNdEx])
			i = encodeVarintCow(dAtA, i, uint64(len(m.CowType[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.State != 0 {
		i = encodeVarintCow(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.CountDown != 0 {
		i = encodeVarintCow(dAtA, i, uint64(m.CountDown))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Cow_Ready) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Cow_Ready) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Cow_Ready) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintCow(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCow(dAtA []byte, offset int, v uint64) int {
	offset -= sovCow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *S2C_Cow_Start) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CountDown != 0 {
		n += 1 + sovCow(uint64(m.CountDown))
	}
	if m.State != 0 {
		n += 1 + sovCow(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Cow_Draw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CountDown != 0 {
		n += 1 + sovCow(uint64(m.CountDown))
	}
	if m.State != 0 {
		n += 1 + sovCow(uint64(m.State))
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovCow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Cards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Card) > 0 {
		l = 0
		for _, e := range m.Card {
			l += sovCow(uint64(e))
		}
		n += 1 + sovCow(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Cow_Compare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CountDown != 0 {
		n += 1 + sovCow(uint64(m.CountDown))
	}
	if m.State != 0 {
		n += 1 + sovCow(uint64(m.State))
	}
	if len(m.CowType) > 0 {
		for _, s := range m.CowType {
			l = len(s)
			n += 1 + l + sovCow(uint64(l))
		}
	}
	if len(m.Result) > 0 {
		l = 0
		for _, e := range m.Result {
			l += sovCow(uint64(e))
		}
		n += 1 + sovCow(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Cow_Ready) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovCow(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCow(x uint64) (n int) {
	return sovCow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2C_Cow_Start) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Cow_Start: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Cow_Start: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountDown", wireType)
			}
			m.CountDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountDown |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Cow_Draw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Cow_Draw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Cow_Draw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountDown", wireType)
			}
			m.CountDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountDown |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &Cards{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Card = append(m.Card, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCow
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCow
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Card) == 0 {
					m.Card = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Card = append(m.Card, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Cow_Compare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Cow_Compare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Cow_Compare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountDown", wireType)
			}
			m.CountDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountDown |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CowType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CowType = append(m.CowType, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Result = append(m.Result, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCow
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCow
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Result) == 0 {
					m.Result = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Result = append(m.Result, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Cow_Ready) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Cow_Ready: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Cow_Ready: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCow = fmt.Errorf("proto: unexpected end of group")
)
